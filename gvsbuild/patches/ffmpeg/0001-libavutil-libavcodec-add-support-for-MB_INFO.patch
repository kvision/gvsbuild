From d2847015f46170289964f428a5d73be9623789b3 Mon Sep 17 00:00:00 2001
From: Elias Carotti <eliascrt@amazon.it>
Date: Thu, 26 May 2022 21:17:43 +0000
Subject: [PATCH] libavutil,libavcodec: add support for MB_INFO

---
 libavcodec/libx264.c | 21 ++++++++++++++++
 libavutil/Makefile   |  4 ++++
 libavutil/frame.h    | 10 ++++++++
 libavutil/mb_info.c  | 41 +++++++++++++++++++++++++++++++
 libavutil/mb_info.h  | 57 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 133 insertions(+)
 create mode 100644 libavutil/mb_info.c
 create mode 100644 libavutil/mb_info.h

diff --git a/libavcodec/libx264.c b/libavcodec/libx264.c
--- a/libavcodec/libx264.c	(revision adb5f7b41faf354a3e0bf722f44aeb230aefa310)
+++ b/libavcodec/libx264.c	(date 1679164364370)
@@ -30,6 +30,7 @@
 #include "libavutil/stereo3d.h"
 #include "libavutil/time.h"
 #include "libavutil/intreadwrite.h"
+#include "libavutil/mb_info.h"
 #include "avcodec.h"
 #include "codec_internal.h"
 #include "encode.h"
@@ -123,6 +124,8 @@
      * encounter a frame with ROI side data.
      */
     int roi_warned;
+
+    int mb_info;
 } X264Context;

 static void X264_log(void *p, int level, const char *fmt, va_list args)
@@ -549,6 +552,20 @@
     if (ret < 0)
         return ret;

+    if (frame && x4->mb_info) {
+        AVFrameSideData *mbinfo_sd = av_frame_get_side_data(frame, AV_FRAME_DATA_MB_INFO);
+
+        if (mbinfo_sd) {
+            AVMBInfo *par = (AVMBInfo *)mbinfo_sd->data;
+
+            x4->pic.prop.mb_info = par->mb_info;
+            x4->pic.prop.mb_info_free = par->mb_info_free;
+        } else if (!mbinfo_sd || !mbinfo_sd->data) {
+            av_log(ctx, AV_LOG_WARNING,
+                    "mb_info flag set but no actual MB info was provided\n");
+        }
+    }
+
     do {
         if (x264_encoder_encode(x4->enc, &nal, &nnal, pic_in, &pic_out) < 0)
             return AVERROR_EXTERNAL;
@@ -1078,6 +1095,9 @@
         }
     }

+    x4->params.analyse.b_mb_info = x4->mb_info;
+    x4->params.analyse.b_fast_pskip = 1;
+
     // update AVCodecContext with x264 parameters
     avctx->has_b_frames = x4->params.i_bframe ?
         x4->params.i_bframe_pyramid ? 2 : 1 : 0;
@@ -1287,6 +1307,7 @@
     { "noise_reduction", "Noise reduction",                               OFFSET(noise_reduction), AV_OPT_TYPE_INT, { .i64 = -1 }, INT_MIN, INT_MAX, VE },
     { "udu_sei",      "Use user data unregistered SEI if available",      OFFSET(udu_sei),  AV_OPT_TYPE_BOOL,   { .i64 = 0 }, 0, 1, VE },
     { "x264-params",  "Override the x264 configuration using a :-separated list of key=value parameters", OFFSET(x264_params), AV_OPT_TYPE_DICT, { 0 }, 0, 0, VE },
+    { "mb_info",      "Set mb_info data through AVSideData, only useful when used from the API", OFFSET(mb_info), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE },
     { NULL },
 };

diff --git a/libavutil/Makefile b/libavutil/Makefile
--- a/libavutil/Makefile	(revision adb5f7b41faf354a3e0bf722f44aeb230aefa310)
+++ b/libavutil/Makefile	(date 1679164466800)
@@ -91,6 +91,7 @@
           tea.h                                                         \
           tx.h                                                          \
           film_grain_params.h                                           \
+          mb_info.h                                                     \

 ARCH_HEADERS = bswap.h                                                  \
                intmath.h                                                \
@@ -196,6 +197,7 @@
 OBJS-$(CONFIG_VIDEOTOOLBOX)             += hwcontext_videotoolbox.o
 OBJS-$(CONFIG_VDPAU)                    += hwcontext_vdpau.o
 OBJS-$(CONFIG_VULKAN)                   += hwcontext_vulkan.o
+OBJS-$(CONFIG_LIBX264)                  += mb_info.o

 OBJS-$(!CONFIG_VULKAN)                  += hwcontext_stub.o

@@ -219,6 +221,8 @@
                                           vulkan_functions.h            \
                                           vulkan_loader.h

+SKIPHEADERS-$(CONFIG_LIBX264)  	       += mb_info.h
+
 TESTPROGS = adler32                                                     \
             aes                                                         \
             aes_ctr                                                     \
diff --git a/libavutil/frame.h b/libavutil/frame.h
--- a/libavutil/frame.h	(revision adb5f7b41faf354a3e0bf722f44aeb230aefa310)
+++ b/libavutil/frame.h	(date 1679164466753)
@@ -210,6 +210,16 @@
      */
     AV_FRAME_DATA_DYNAMIC_HDR_VIVID,

+    /**
+     * Provide macro block encoder-specific hinting information for the encoder
+     * processing.  It can be used to pass information about which macroblock
+     * can be skipped because it hasn't changed from the corresponding one in
+     * the previous frame. This is useful for applications which know in
+     * advance this information to speed up real-time encoding.  Currently only
+     * used by libx264.
+     */
+    AV_FRAME_DATA_MB_INFO,
+
     /**
      * Ambient viewing environment metadata, as defined by H.274.
      */
diff --git a/libavutil/mb_info.c b/libavutil/mb_info.c
new file mode 100644
--- /dev/null	(date 1679164466816)
+++ b/libavutil/mb_info.c	(date 1679164466816)
@@ -0,0 +1,41 @@
+/*
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include <string.h>
+
+#include "avstring.h"
+#include "frame.h"
+#include "macros.h"
+#include "mem.h"
+#include "mb_info.h"
+
+
+AVMBInfo *av_mb_info_create_side_data(AVFrame *frame, uint8_t* mb_info,
+                                            void (*mb_info_free)(void *))
+{
+    AVFrameSideData *side_data = av_frame_new_side_data(frame,
+                                                        AV_FRAME_DATA_MB_INFO,
+                                                        sizeof(AVMBInfo));
+    AVMBInfo *par = (AVMBInfo *)side_data->data;
+
+    par->mb_info = mb_info;
+    par->mb_info_free = mb_info_free;
+
+    return par;
+}
+
diff --git a/libavutil/mb_info.h b/libavutil/mb_info.h
new file mode 100644
--- /dev/null	(date 1679164466847)
+++ b/libavutil/mb_info.h	(date 1679164466847)
@@ -0,0 +1,57 @@
+/**
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#ifndef AVUTIL_MB_INFO_H
+#define AVUTIL_MB_INFO_H
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "libavutil/avassert.h"
+#include "libavutil/frame.h"
+
+
+typedef struct AVVideoMBInfo {
+    /**
+     * The actual mb_info data: one uint8_t per macroblock in raster-scan order.
+     * Currently the only flag defined in x264.h is X264_MB_INFO_CONSTANT
+     */
+    uint8_t *mb_info;
+
+    /* An optional pointer (may be NULL) to a de-allocator for the mb_info data */
+    void (*mb_info_free)(void *);
+} AVMBInfo;
+
+/**
+ * Allocate memory for AVMBInfo and initialize the parameters.
+ * Can freed with a normal av_free() call.
+ *
+ * @param out_size if non-NULL, the size in bytes of the resulting data array is
+ * written here.
+ */
+AVMBInfo *av_mb_info_alloc(uint8_t* mb_info, void (*mb_info_free)(void *));
+
+/**
+ * Allocate memory for AVMBInfo in the given AVFrame {@code frame}
+ * as AVFrameSideData of type AV_FRAME_DATA_MB_INFO
+ * and initializes the variables.
+ */
+AVMBInfo *av_mb_info_create_side_data(AVFrame *frame, uint8_t* mb_info,
+                                            void (*mb_info_free)(void *));
+
+#endif /* AVUTIL_MB_INFO_H */

